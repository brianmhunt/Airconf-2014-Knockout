
# ----------  TEXT.HTML  ------------

".text.html":
  "Step 1: Add <script> tags":
    prefix: "s1"
    part: 1
    body: """

    <!-- SCRIPTS -->
    <script src='../lib/knockout.js'></script>
    <script src='../lib/lodash.js'></script>
    <!-- plugins -->
    <script src='../lib/knockout-projections.js'></script>
    <script src='../lib/knockout.punches.js'></script>
    <!-- Some data -->
    <script src='../data/hosd.js'></script>
    <!-- Our javascript (we'll be editing) -->
    <script src="./my.js"></script>
    """

  "Step 3: Show the list on the screen":
    prefix: "s3"
    part: 2
    body: """
      <h1>List of State defaults</h1>

      <ul data-bind='foreach: defaults'>
        <li>
          <span data-bind='text: year'></span>
        </li>
      </ul>
    """

  "Step 4: Use Punches {{ }} interpolation":
    prefix: "s4"
    part: 2
    body: """
      <b>{{ year }}</b> {{ state }}
    """

  "Step 6: Add grepping":
    prefix: "s6"
    part: 3
    body: """
      <input type='text' data-bind='textInput: grep'/>
    """

  "Step 10: Change to a web component":
    prefix: "s10"
    part: 4
    body: """
    <state-default params="data: $data"></state-default>
    """

  "Step 12: Add state-default-template <template>":
    prefix: "s12"
    part: 5
    body: """
      <b>{{ year }}</b> {{ state }}
    """

  "Step 13: Uh oh - Change state template to a <tr>":
    prefix: "s13"
    part: 5
    body: """
      <table>
        <thead>
          <th> Year </th> <th> State </th> <th> Comment </th>
        </thead>
        <tbody data-bind='foreach: defaults'>
          <state-default-tr params="data: $data"></state-default-tr>
        </tbody>
      </table>

      <template id='state-default-tr-template'>
        <tr>
          <td> {{ year }} </td> <td> {{ state }} </td> <td> {{ comment }} </td>
        </tr>
      </template>
    """

  "Step 15: Use inline components: binding":
    prefix: "s15"
    part: 5
    body: """
      <table>
        <thead>
          <th> Year </th> <th> State </th> <th> Comment </th>
        </thead>
        <tbody data-bind='foreach: defaults'>
          <tr data-bind='component: {
              name: "state-default-tr", params: {data: $data} }'>
          </tr>
        </tbody>
      </table>

      <template id='state-default-tr-template'>
        <td> {{ year }} </td> <td> {{ state }} </td> <td> {{ comment }} </td>
      </template>
    """

  "Step 16: Add sort-by html":
    prefix: "s16"
    part: 6
    body: """
      <div class='sort'>
        Sort by ({{ sort_by()|default:"unsorted" }}):<br/>
        <button data-bind='click: sort_click'>None</button>
        <button data-bind='click: sort_click'>State</button>
        <button data-bind='click: sort_click'>Year</button>
      </div>
    """

# ---------   SOURCE.JS    -------------

".source.js":
  "Step 2: Add KO to my.js":
    prefix: "s2"
    part: 1
    body: """
    var view = {
      defaults: window.hosd
    };

    ko.applyBindings(view);
    """

  "Step 5: Enable punches":
    prefix: "s5"
    part: 2
    body: """
      ko.punches.enableAll();
    """

  "Step 7: Use projections to filter the view":
    prefix: "s7"
    part: 3
    body: """
      function filter(item) {
        if (!view.grep()) {
          return true;
        }
        return (item.year + " " + item.state).toLowerCase()
          .indexOf(view.grep().toLowerCase()) >= 0;
      }

      var view = {
        grep: ko.observable(),
      };

      view.defaults = ko.observableArray(window.hosd).filter(filter);
    """

  "Step 8: Use rate limit to improve performance":
    prefix: "s8"
    part: 3
    body: """
      grep: ko.observable().extend({rateLimit: 200}),
    """

  "Step 9: Using Web Components":
    prefix: "s9"
    part: 4
    body: """
      ko.components.register("state-default", {
        viewModel: function(params) {
          this.year = params.data.year || "unknown";
          this.state = params.data.state;
          this.comment = params.data.comment;
        },
        template: "<b>{{ year }}</b> {{ state }}"
      });
    """

  "Step 11: Switch to template-by-element":
    prefix: "s11"
    part: 4
    body: """
      template: {element: "state-default-template"}
    """

  "Step 14: Change ko.component to -tr":
    prefix: "s14"
    part: 5
    body: """
      ko.components.register("state-default-tr", {
        viewModel: function(params) {
          this.year = params.data.year || "unknown";
          this.state = params.data.state;
          this.comment = params.data.comment;
        },
        template: {element: "state-default-tr-template"}
      });
    """

  "Step 17: Add sorting":
    prefix: "s17"
    part: 6
    body: """
    var view = {
      grep: ko.observable().extend({rateLimit: 200}),
      sort_by: ko.observable(),
      sort_click: function (vm, evt) {
        view.sort_by(evt.target.innerText);
      }
    };
    """

  "Step 18: Sort the observables":
    prefix: "s18"
    part: 6
    body: """
      var unsorted_defaults = ko.observableArray(window.hosd)
        .filter(filter)
        .extend({rateLimit: 200});
      var sortable_defaults = ko.observableArray(unsorted_defaults());
      unsorted_defaults.subscribe(sortable_defaults)

      function year_sort(a, b) {
        return a.year == b.year ? 0 : (a.year < b.year ? -1 : 1);
      }

      function state_sort(a, b) {
        return a.state == b.state ? 0 : (a.state < b.state ? -1 : 1);
      }

      view.defaults = ko.computed(function () {
        var sort_by = view.sort_by();
        var items = sortable_defaults();
        if (!sort_by || sort_by == 'None') {
          return items;
        }
        return items.sort(sort_by == 'State' ? state_sort : year_sort)
      });
    """

  "Step 19: Fix the observable sorting":
    prefix: "s19"
    part: 6
    body: """
      var view = {
        grep: ko.observable().extend({rateLimit: 200}),
        sort_by: ko.observable(),
        defaults: ko.observableArray(),
        sort_click: function (vm, evt) {
          view.sort_by(evt.target.innerText);
        },
      };

      var unsorted_defaults = ko.observableArray(window.hosd).filter(filter);

      function year_sort(a, b) {
        return a.year == b.year ? 0 : (a.year < b.year ? -1 : 1);
      }

      function state_sort(a, b) {
        return a.state == b.state ? 0 : (a.state < b.state ? -1 : 1);
      }

      function sort_defaults_fn() {
        var sort_by = view.sort_by();
        var items = unsorted_defaults().concat();
        if (!sort_by || sort_by == 'None') {
          view.defaults(items);
        }
        view.defaults(items.sort(sort_by == 'State' ? state_sort : year_sort))
      }
      var sort_defaults = _.debounce(sort_defaults_fn, 200);

      unsorted_defaults.subscribe(sort_defaults);
      view.sort_by.subscribe(sort_defaults);
      sort_defaults();
    """
